// TODO: Add mailing list options
// https://apidocs.mailchimp.com/api/2.0/lists/subscribe.php
// http://stackoverflow.com/questions/19671676/javascript-mailchimp-api-subscribe

Percolate = typeof Percolate === 'undefined' ? {} : Percolate;
Percolate.Contact = {};

Percolate.Contact.Overlay = React.createClass({displayName: "Overlay",
  propTypes: {
    containerElement: React.PropTypes.instanceOf(Element)
  },

  getDefaultProps: function() {
    return {
      containerElement: null
    }
  },

  setOpen: function(open) {
    jQuery(this.props.containerElement).toggleClass('contact-open', !! open);
  },

  handleClose: function(event) {
    event.preventDefault();
    this.setOpen(false);
  },

  render: function() {
    return (
      React.createElement("div", {className: "percolate-contact-overlay"}, 
        React.createElement("a", {className: "overlay-close", onClick: this.handleClose}, 
          React.createElement("span", {className: "icon-cross"})
        ), 
        React.createElement(Percolate.Contact.Form, {setOverlayOpen: this.setOpen})
      )
    )
  }
});

Percolate.Contact.Footer = React.createClass({displayName: "Footer",
  render: function() {
    return (
      React.createElement("div", {className: "ancillary-contact vcard"}, 
        React.createElement("div", {className: "wrapper-connect"}, 
          React.createElement("div", {className: "title-ancillary"}, "Connect"), 
          React.createElement("div", {className: "list"}, 
            React.createElement("a", {className: "url monochrome", href: "http://twitter.com/percolatestudio", target: "_blank"}, "Twitter"), 
            React.createElement("a", {className: "url monochrome", href: "http://github.com/percolatestudio", target: "_blank"}, "Github"), 
            React.createElement("a", {className: "email monochrome", href: "mailto:us@percolatestudio.com?subject=Hello%20Percolate"}, "Email")
          )
        ), 
        React.createElement("div", {className: "wrapper-visit"}, 
          React.createElement("div", {className: "title-ancillary"}, "Visit Us"), 
          React.createElement("a", {className: "location-wrapper organization-unit adr", 
            href: "https://www.google.com/maps/place/169+11th+St,+San+Francisco,+CA+94103/@37.77357,-122.415787,17z/data=!3m1!4b1!4m2!3m1!1s0x8085809d83ced185:0xf5e9ad23d5cd5ce5", target: "_blank"}, 
            React.createElement("span", {className: "fn organization-name", style:  {display: 'none'} }, "Percolate Studio"), 
            React.createElement("span", null, "Percolate USA"), React.createElement("br", null), 
            React.createElement("span", {className: "street-address"}, "169 11th Street"), React.createElement("br", null), 
            React.createElement("span", {className: "locality"}, "San Francisco"), ", ", React.createElement("span", {className: "region"}, "CA"), " ", React.createElement("span", {className: "postal-code"}, "94103")
          ), 
          React.createElement("a", {className: "location-wrapper organization-unit adr", 
            href: "https://www.google.com/maps/place/50+Herbert+St,+Northcote+VIC+3070,+Australia/@-37.771764,144.995165,17z/data=!3m1!4b1!4m2!3m1!1s0x6ad6437ca420f13f:0xb6908ada5cdfa379", target: "_blank"}, 
            React.createElement("span", null, "Percolate AUS"), React.createElement("br", null), 
            React.createElement("span", {className: "street-address"}, "50 Herbert Street"), React.createElement("br", null), 
            React.createElement("span", {className: "locality"}, "Melbourne"), ", ", React.createElement("span", {className: "region"}, "VIC"), " ", React.createElement("span", {className: "postal-code"}, "3001")
          )
        )
      )
    )
  }
});

// Gathers all truthy values in obj referenced by keys and returns matching
// keys in an array
var gatherTruthy = function(/* obj, ...keys */) {
  var keys = Array.prototype.slice.call(arguments);
  var result = [];

  obj = keys.shift();

  _.each(keys, function(key) {
    if (obj[key] && result.indexOf(key) === -1)
      result.push(key);
  });

  return result;
}

Percolate.Contact.Form = React.createClass({displayName: "Form",
  mixins: [React.addons.LinkedStateMixin],

  getInitialState: function() {
    return {
      name: '',
      email: '',
      about: '',
      strategy: false,
      design: false,
      engineering: false,
      consulting: false,
      today: false,
      quarter: false,
      year: false,
      '25k': false,
      '50k': false,
      '100k': false,
      notsure: false,
      errors: {},
      submitting: false
    };
  },

  getModel: function() {
    var model = _.pick(this.state, 'name', 'email', 'about');
    model.services = gatherTruthy(this.state, 'strategy', 'design',
      'engineering', 'consulting');
    model.timing = gatherTruthy(this.state, 'today', 'quarter', 'year');
    model.budget = gatherTruthy(this.state, '25k', '50k', '100k', 'notsure');

    return model;
  },

  handleSubmit: function(event) {
    event.preventDefault();

    if (this.validate()) {
      this.send();
    }
  },

  componentDidMount: function() {
    jQuery(this.refs.about.getDOMNode()).autosize();
  },

  alertClass: function(name) {
    return this.state.errors[name] ? 'alert' : '';
  },

  // urgh, wish we had a schema library
  validate: function() {
    var errors = this.state.errors = {},
      valid = true,
      model = this.getModel();

    _.each(['name', 'email', 'about'], function(field) {
      if (! model[field]) {
        errors[field] = 'is required';
        valid = false;
      } else if (model[field].length > 10000) {
        errors[field] = 'is too long';
        valid = false;
      }
    }.bind(this));

    _.each(['services', 'timing'], function(field) {
      if (! model[field].length) {
        errors[field] = 'is required';
        valid = false;
      }
    }.bind(this));

    if (this.shouldHaveBudget() && ! model.budget.length) {
      errors['budget'] = 'is required';
      valid = false;
    }

    this.setState({errors: errors});

    return valid;
  },

  send: function(model) {
    var model = this.getModel();
    var to = 'us@percolatestudio.com';
    var subject = 'Work with us';
    var body = React.renderToStaticMarkup(
      React.createElement(Percolate.Contact.FormEmail, {model: model}));

    var data = {
        'key': '-JqlbKb2ZHU7R5NEkCvnKw', // changeme
        'message': {
          'from_email': model.email,
          'to': [
              {
                'email': to,
                'name': 'Percolate Studio',
                'type': 'to'
              },
              {
                'email': 'zol@percolatestudio.com', // just in case us@ breaks
                'name': 'Zoltan Olah',
                'type': 'to'
              }
            ],
          'autotext': 'true',
          'subject': subject,
          'html': body
        }
      };

    this.setState({ submitting: true });
    jQuery.post('https://mandrillapp.com/api/1.0/messages/send.json', data)
      .done(function() {
        alert('Thank you. We will contact you shortly');
      })
      .fail(function() {
        // fallback incase ajax fails
        window.open('mailto:' + to
          + '?subject=' + subject + ' (mailto)'
          + '&body=' + escape(body)
        );
      })
      .always(function() {
        this.setState({ submitting: false });
        this.props.setOverlayOpen(false);
      }.bind(this));
  },

  error: function(name) {
    if (this.state.errors[name])
      return (React.createElement("span", {className: "error"}, this.state.errors[name]));
  },

  shouldHaveBudget: function() {
    return this.state.strategy || this.state.design || this.state.engineering;
  },

  render: function() {
    var budgetFieldsetClasses = "fieldset-group hidden "
      + (this.shouldHaveBudget() ? 'visible' : '');

    var servicesError = this.error('services');

    var servicesLabel = servicesError ? servicesError :
      (React.createElement("span", {className: "subtext"}, "Select all that apply"));

    return (
      React.createElement("form", {className: "contact-form-wrapper", onSubmit: this.handleSubmit}, 
        React.createElement("div", {className: "title-overlay"}, "Work with us"), 
        React.createElement("fieldset", null, 
          React.createElement("div", {className: "input-symbol left"}, 
            React.createElement("input", {type: "text", name: "name", className: this.alertClass('name'), placeholder: "Name", valueLink: this.linkState('name')}), 
            React.createElement("span", {className: "icon-user"})
          ), 
          React.createElement("div", {className: "input-symbol left"}, 
            React.createElement("input", {type: "email", name: "email", className: this.alertClass('email'), placeholder: "Email Address", valueLink: this.linkState('email')}), 
            React.createElement("span", {className: "icon-email"})
          ), 
          React.createElement("textarea", {className: 'about ' + this.alertClass('about'), name: "about", placeholder: "About your company and project", valueLink: this.linkState('about'), ref: "about"}), 
          React.createElement("div", {className: "fieldset-group services"}, 
            React.createElement("div", {className: "fieldset-group-title"}, "Services ", servicesLabel), 

            React.createElement("div", {className: "btns-group"}, 
              React.createElement("input", {type: "checkbox", name: "services", value: "strategy", id: "strategy", checkedLink: this.linkState('strategy')}), 
              React.createElement("label", {htmlFor: "strategy", className: "btn-toggle"}, "Strategy"), 

              React.createElement("input", {type: "checkbox", name: "services", value: "design", id: "design", checkedLink: this.linkState('design')}), 
              React.createElement("label", {htmlFor: "design", className: "btn-toggle"}, "Design"), 

              React.createElement("input", {type: "checkbox", name: "services", value: "engineering", id: "engineering", checkedLink: this.linkState('engineering')}), 
              React.createElement("label", {htmlFor: "engineering", className: "btn-toggle"}, "Engineering"), 

              React.createElement("input", {type: "checkbox", name: "services", value: "consulting", id: "consulting", checkedLink: this.linkState('consulting')}), 
              React.createElement("label", {htmlFor: "consulting", className: "btn-toggle"}, "Consulting")
            )
          ), 
          React.createElement("div", {className: "fieldset-group"}, 
            React.createElement("div", {className: "fieldset-group-title"}, "Timing ", this.error('timing')), 

            React.createElement("div", {className: "btns-group"}, 
              React.createElement("input", {type: "radio", name: "timing", value: "today", id: "today", checkedLink: this.linkState('today')}), 
              React.createElement("label", {htmlFor: "today", className: "btn-toggle"}, "Today"), 

              React.createElement("input", {type: "radio", name: "timing", value: "quarter", id: "quarter", checkedLink: this.linkState('quarter')}), 
              React.createElement("label", {htmlFor: "quarter", className: "btn-toggle"}, "Quarter"), 

              React.createElement("input", {type: "radio", name: "timing", value: "year", id: "year", checkedLink: this.linkState('year')}), 
              React.createElement("label", {htmlFor: "year", className: "btn-toggle"}, "This Year")
            )
          ), 
          React.createElement("div", {className: budgetFieldsetClasses}, 
            React.createElement("div", {className: "fieldset-group-title"}, "Budget ", this.error('budget')), 

            React.createElement("div", {className: "btns-group"}, 
              React.createElement("input", {type: "radio", name: "budget", value: "25k", id: "25k", checkedLink: this.linkState('25k')}), 
              React.createElement("label", {htmlFor: "25k", className: "btn-toggle"}, "25k–50k"), 

              React.createElement("input", {type: "radio", name: "budget", value: "50k", id: "50k", checkedLink: this.linkState('50k')}), 
              React.createElement("label", {htmlFor: "50k", className: "btn-toggle"}, "50k–100k"), 

              React.createElement("input", {type: "radio", name: "budget", value: "100k", id: "100k", checkedLink: this.linkState('100k')}), 
              React.createElement("label", {htmlFor: "100k", className: "btn-toggle"}, "+100k"), 

              React.createElement("input", {type: "radio", name: "budget", value: "notsure", id: "notsure", checkedLink: this.linkState('notsure')}), 
              React.createElement("label", {htmlFor: "notsure", className: "btn-toggle"}, "Not sure")
            )

          ), 
          React.createElement("button", {className: "btn-primary caps", disabled: this.state.submitting, type: "submit"}, "Send Message")
        ), 
        React.createElement(Percolate.Contact.Footer, null)
      )
    )
  }
});

Percolate.Contact.FormEmail = React.createClass({displayName: "FormEmail",
  render: function() {
    var model = this.props.model;

    var servicesNodes = model.services.map(function(service, index) {
      return ( React.createElement("li", {key: index}, service) );
    });

    var timing = model.timing.join();
    var budget = model.budget.join();

    var budgetNodes = budget ? [React.createElement("dt", {key: "0"}, "Budget"), React.createElement("dd", {key: "1"}, budget)] : null;

    return (
      React.createElement("dl", null, 
        React.createElement("dt", null, "Name"), React.createElement("dd", null, model.name), 
        React.createElement("dt", null, "Email"), React.createElement("dd", null, model.email), 
        React.createElement("dt", null, "About"), React.createElement("dd", null, model.about), 
        React.createElement("dt", null, "Services"), React.createElement("dd", null, React.createElement("ul", null, servicesNodes)), 
        React.createElement("dt", null, "Timing"), React.createElement("dd", null, timing), 
        budgetNodes, 
        React.createElement("dt", null, "Referer"), React.createElement("dd", null, "Blog")
      )
    )
  }
});

//# sourceMappingURL=data:application/json;base64,